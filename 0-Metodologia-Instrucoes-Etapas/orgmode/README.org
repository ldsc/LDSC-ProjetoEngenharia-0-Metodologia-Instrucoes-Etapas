#+TITLE: ProjetoEngenharia-0-Metodologia-Instrucoes-Etapas

* ProjetoEngenharia-0-Metodologia-Instrucoes-Etapas

* Sobre a metodologia<<Sobre a metodologia>>
- Apresenta-se aqui a metodologia a ser utilizada no desenvolvimento do projeto de engenharia.
- O software a ser desenvolvido utiliza a metodologia de engenharia de software apresentada pelo Prof. André Bueno na disciplina de introdução ao projeto de engenharia.
- Ilustrado de forma compacta na Figura [[https://lh3.googleusercontent.com/3FA6X9HCdI86hq8zhdP6lJuJ_Xmkxf7aTzAY9UDUA_ktiIAnPfQ4-8m98AMt6u_DiElXayUcdB6JrDCtZA9O-3o][Etapas de gestão e desenvolvimento do projeto de engenharia-resumo]].
  - Nota: se as imagens não abrirem aqui, acesse [[https://sites.google.com/view/professorandreduartebueno/ensino/introdu%C3%A7%C3%A3o-ao-projeto-de-engenharia?authuser=0#h.jzh3wtardi2q][este link]].
- Esta metodologia é utilizada nas disciplinas:
  - [[https://sites.google.com/view/professorandreduartebueno/ensino/introdu%C3%A7%C3%A3o-ao-projeto-de-engenharia][LEP0xxx: Introdução ao Projeto de Engenharia]].
  - [[https://sites.google.com/view/professorandreduartebueno/ensino/prog-orientada-objeto-c-2024][LEP01447 : Programação Orientada a Objeto em C++]].
  - [[https://sites.google.com/view/professorandreduartebueno/ensino/projeto-de-software-aplicado][LEP01446 : Projeto de Software Aplicado à Engenharia (antiga programação prática)]].
- Esta metodologia você acessa em diferentes locais:
  - [[https://drive.google.com/file/d/1C-FFMmKNRR4-5TUMdOYBQXNSPzXNSb0t/view?usp=drive_link][Arquivo compartilhado no google drive]].
  - [[https://github.com/ldsc/ProjetoEngenharia-0-Metodologia-Instrucoes-Etapas-ModeloProfessorBueno][Repositório compartilhado no site github]].
  - [[https://github.com/ldsc/ProjetoEngenharia-1-TituloProjeto-Modelo/0-Metodologia-Instrucoes-Etapas/ProjetoEngenharia-1-Metodologia-Instrucoes-Etapas.pdf][ProjetoEngenharia-1-Metodologia-Instrucoes-Etapas.pdf]].
  - [[https://sites.google.com/view/professorandreduartebueno/ensino/introdu%C3%A7%C3%A3o-ao-projeto-de-engenharia][Site da disciplina Introdução ao Projeto de Engenharia]].
- Também pode olhar o modelo padrão para os projetos de engenharia disponibilizado em
  - [https://github.com/ldsc/ProjetoEngenharia-1-TituloProjeto-Modelo].
  - Note que neste caso temos o modelo completo com todas as etapas e arquivos.
- Se tiver dúvidas sobre a metodologia contactar o professor coordenador da disciplina, [[mailto:bueno@lenep.uenf.br][e-mail professor]].

* Etapas<<Etapas>>

** Etapa 0 - Definição do desafio tecnológico<<Etapa 0 - Definição do desafio tecnológico>><<Etapa 0>>
- A primeira etapa do processo de desenvolvimento de nosso produto tecnológico é a definição pelo cliente (um(a) professor(a), um(a) engenheiro(a) de empresa) do problema a ser resolvido, o escopo do problema de engenharia. Deve apresentar o desafio tecnológico o objetivo geral e a solução esperada.
- A Figura [[https://lh5.googleusercontent.com/_PcNQWiV8inKSuhWWOJMmWmvZObLXDCcuRv-EACRBekTeeKJnl6Bhqp0YRbM1c0aiNh1oEdBsDZ-eIxGioRUhqc][Etapas Definição do Desafio tecnológico]]
- Veja a seguir descrição das sub-etapas associadas:
- O cliente (professor(a) ou empresa) interessado lê as informações da metodologia de desenvolvimento adotada na disciplina de "Introdução ao Projeto de Engenharia".
- Estando em acordo com a metodologia empregada o cliente deve informar o interesse em montar um desafio tecnológico. Neste caso enviar para o email [[mailto:bueno@lenep.uenf.br][e-mail professor]] os seguintes dados:
  - Nome do cliente (professor ou responsável na empresa)
    - Telefone
    - E-mail
    - Informar se já tem cadastro no github e login no github.
  - Título do desafio tecnológico
    - Breve resumo/rascunho tecnológico [até 500 palavras]
  - Caso já tenha um ou mais alunos interessados informar o(s) dado(s) do(s) mesmo(s):
    - Nome do aluno
    - Telefone
    - E-mail
    - Informar se já tem cadastro no github e login no github.
- O coordenador da disciplina analisa os dados e dá um retorno.
  - Caso o rascunho da proposta seja rejeitado, explica os motivos, possibilitando correções e reenvio do rascunho da proposta.
  - Um rascunho de proposta que esteja fora do escopo das disciplinas de modelagem computacional será rejeitado. Por exemplo, uma proposta que envolva apenas a parte de experimentos de laboratório sem o desenvolvimento dos softwares associados será rejeitada. Ou seja, toda proposta deve incluir o desenvolvimento de um software em C++, podendo ser um software educativo(simuladores didáticos), um software que resolva algoritmos de engenharia (rotinas computacionais), desenvolvimento de uma biblioteca computacional que dê suporte a problemas típicos de engenharia, simuladores de problemas relacionados a engenharia de petróleo, simuladores relacionados a geologia, geoquímica, geofísica, petrofísica, engenharia de poço, engenharia de elevação e escoamento, engenharia de reservatório; simuladores que tratem de problemas numéricos utilizando volumes finitos, diferenças finitas ou elementos finitos. Devem tratar da solução de problemas de engenharia.
- Caso o rascunho da proposta seja aprovado, o coordenador da disciplina informa o cliente (e alunos caso já tenha).
- O cliente (professor/engenheiro) e alunos devem realizar seu cadastro no github e informar o professor Bueno.
- O coordenador da disciplina
  - Clona o modelo de projeto da disciplina, criando um projeto novo, com o título do projeto informado.
  - Adiciona no projeto o cliente (professor/engenheiro) e alunos (caso já tenha os alunos).
    - Note que para adicionar os mesmos no projeto requer o cadastro dos mesmos no github.
  - Envia para o cliente (e alunos) o link para o projeto no github, de forma que poderão acessar o mesmo.
- O cliente (professor/gerente empresa) 
  - Baixa o modelo de projeto criado para sua máquina usando o link informado.
  - Acessa o modelo de documento com a descrição do desafio tecnológico.
    - Nota: Se ainda não tem o LyX instalado deve fazer a instalação.
    - Caso não saiba usar o LyX pode gerar a proposta de desafio tecnológico usando outro editor (como word ou google docs).
    - Neste caso usar o modelo no formato doc. 
  - Preenche os dados da proposta do desafio tecnológico.
  - Gera o pdf associado.
  - Envia os arquivos gerados para o servidor do github (doc e pdf).
    - Comandos: *git add . && git commit -m "gerado o desafio tecnológico" && git push*
    - Nota: Se não tiver nenhum conhecimento de git/github e lyx, pode acessar diretamente o documento 1-DesafioTecnologico-2-DescricaoDaProposta.doc e editar o mesmo. Após concluir a descrição da proposta enviar para o coordenador da disciplina.
  - Note que as propostas de desafios tecnológicos podem ser submetidas sem que tenhamos alunos interessados, neste caso ficam num banco de dados disponibilizado aos alunos. Na prática a intenção é termos a disposição dos alunos uma série de desafios tecnológicos a serem resolvidos, assim a equipe de alunos escolhe um desafio que lhe interessa.
  - O cliente deve ter ciência de que:
    - O prazo total para execução do projeto é de 18 a 24 meses.
    - O projeto deve estar no escopo do curso (disciplinas da grade).

** Etapa 1 - Elaboração do pré-projeto <<Etapa 1 - Elaboração do pré-projeto>><<Etapa 1>>
- A sequência é apresentada na Figura [[https://lh5.googleusercontent.com/phWUrhM1wTbH9ZwNMo0x4PFWb_KAZZWdWsgL8KqFQ5YNfR4c09Mn4JF5gpupuCcQX1W3NzvidxvOYXNpSdef_4c][Etapa 1 - Elaboração do Pré-Projeto]].
- Os alunos analisam os diversos desafios tecnológicos que foram propostos e selecionam um de seu interesse. 
  - Se não tivermos desafios previamente definidos a equipe deve apresentar sugestões de desafios ao coordenador da disciplina usando o passo a passo descrito na seção [[Etapa 0]].
  - A montagem da equipe é ponto central e deve ser realizada com cuidado. Esteja atento para os seguintes pontos:
    - O tema do projeto deve ser de interesse dos membros da equipe.
    - Fujam de temas que parecem mais fáceis mas não são interessantes(escolha algo que gosta, tem interesse efetivo, pois como é um trabalho de longo prazo, para se manter motivado o tema deve ser de seu interesse).
    - Os membros da equipe devem conseguir se reunir fisicamente e na forma /online/  para esclarecimento das atividades desenvolvidas e apoio mútuo no esclarecimento de dúvidas dos problemas associados (teóricos e práticos).
    - Um aluno que tenha reprovado numa das disciplinas poderá continuar na mesma equipe e projeto. O projeto pode ser defendido isoladamente.
- Os alunos informam o professor coordenador da disciplina o desafio selecionado e passam as seguintes informações:
  - Nome do desafio tecnológico.
  - Dados dos membros da equipe [nome, email, email institucional, telefone].
  - Caso ainda não tenham os alunos fazem seu cadastro no site github [[[http://www.github.com]]].
    - Nota: É necessário assistir vídeos e ler material sobre o software git e o software github. Lembrando que os mesmos são apresentados na disciplina.
    - Sugere-se que criem seu próprio repositório e pratiquem os comandos e ações de uso do git e github antes de executar os comandos diretamente no projeto da disciplina.
    - Matenham backups dos arquivos.
- O professor coordenador da disciplina adiciona os alunos da equipe no repositório do projeto selecionado.
- A seguir os alunos fazem o download do repositório em seus computadores.
- Elaboram o pré-projeto.
  - Requer instalação e leitura do tutorial do editor de texto LyX http://www.lyx.org.
  - Requer o conhecimento do mecanismo de trabalho em equipe usando os softwares git e github.
  - Requer compreensão dos conceitos físicos e de engenharia associados.
- Os alunos encaminham o pré-projeto.
  - Os encaminhamentos são sempre pelo github.
- O pré-projeto deve ser aprovado pelo cliente que elaborou o desafio e pelo coordenador da disciplina.
  - Note que temos um desafio do cliente. Os alunos elaboraram um pré-projeto (rascunho de solução preliminar). Este pré-projeto deve ser aprovado pelo cliente.
  - Note que esta análise é necessária para evitarmos problemas de entendimento do que deve ser feito. Tanto o cliente quando a equipe de engenheiros devem estar de acordo com o que será realizado antes da elaboração do projeto detalhado e do contrato. Em engenharia um projeto detalhado é chamado de projeto executivo, o mesmo requer muito trabalho para ser elaborado e normalmente é cobrado.


** Etapa 2 - Elaboração do projeto - detalhamento e contrato<<Etapa 2 - Elaboração do Projeto - Detalhamento e Contrato>><<Etapa 2>>

- A sequência é detalhada na Figura [[https://lh6.googleusercontent.com/FUu64ct3nwrQ0JM55U_F1bVUn6uT0HOLSc18RDzvzA3Pak9W5fxXFFRxh0PBmo3lh4E-eGqmTAFRZkGKkscMqQNjjTAfBEn9GhmMClYxQ9mKGfeoO_TcEeQgsSxjYNAcRA=w1280][ Etapa 2 - Elaboração do Projeto - Detalhamento e Contrato]].

- Após aprovação do pré-projeto os alunos detalham o mesmo gerando o projeto.
  - Os dados do pré-projeto podem ser copiados para o projeto.
  - A seguir tudo deve ser mais detalhado.
  - As etapas associadas devem ser bem definidas.
  - O cronograma deve ser realista.
  - O orçamento deve ser bem realizado.
    - Por exemplo, para realização do projeto serão necessários computadores com determinada configuração, os mesmos devem ser orçados.


** Etapa 3 - Modelagem de engenharia<<Etapa 3 - Modelagem de engenharia>><<Etapa 3>>

- A sequência é detalhada na Figura [[https://lh5.googleusercontent.com/IwzkWE-DsSr_aVUZ7yusn46TdVygBXPHheSknu3aptjIiAQxynhiitxXfb-jk32cFpLzQDyxvIygVNOiHJxSX0xxmAETUvgf9RBzYOSjQIbPikRs3_eP_ZWyKytwBagB=w1280][Etapa 3 - Modelagem de Engenharia]].

- Nesta etapa os alunos devem desenvolver um modelo abrangente do sistema de software a ser desenvolvido. Passa pelas etapas de:
  - Concepção
  - Elaboração
  - Análise Orientada a Objeto
  - Projeto do Sistema
  - Projeto Orientado a Objeto
  - Realização de Testes Lógicos
  - Documentação (geração dos documentos de modelagem e diagramas associados).
  - Geração da lista de características ou features que serão implementados.
- Nota: É fundamental gerar uma documentação que dê uma visão clara de todo o sistema, mas, nesta etapa, não é necessário pormenorizar tanto. Por exemplo, diagramas de máquina de estado e diagramas de atividades aparecem pouco aqui. O detalhamento será feito nos ciclos de desenvolvimento.
- Nota: Outras imagens detalhando esta etapa estão disponibilizadas [[https://sites.google.com/view/professorandreduartebueno/ensino/introdu%C3%A7%C3%A3o-ao-projeto-de-engenharia?authuser=0#h.jzh3wtardi2q][neste link]].


** Etapa 4 - Ciclos de planejamento, detalhamento e construção/implementação<<Etapa 4 - Ciclos de planejamento, detalhamento e construção/implementação>><<Etapa 4>>

- A sequência é detalhada na Figura [[https://lh4.googleusercontent.com/xLuHZWVjXOIyCj9VhKccdDI3aGtVeELU77ystSjv_lcNJ_Sqq4-yr7qGQ8Ct39c5c9nlxdJMkwK--XQ537zzQwxWMu8827vj3RbV7ZWmhHkfgOULBwJVI0mTYxJbQ3L1TQ=w1280][Etapa 4 - Ciclos de planejamento, detalhamento e construção]].
- Note que:
  - A cada ciclo de planejamento, detalhamento e construção, a equipe seleciona um grupo de funcionalidades/features a serem implementadas.
  - O conjunto de funcionalidades a serem implementadas devem "caber" dentro do prazo do ciclo e estar de acordo com o cronograma.
  - A seguir é feito um planejamento detalhado das características a serem implementadas, refinando os diagramas e adicionando novos diagramas, como exemplo diagramas de máquina de estado mais detalhados e diagramas de atividades.
    - Nota: Lembre-se que os diagramas visam dar aos membros da equipe de engenharia uma visão clara dos conceitos/classes/funcionalidades a serem implementadas. Não é necessário exagerar, criando diagramas para conceitos muito simples ou algoritmos e rotinas amplamente conhecidos. Uma forma de identificar se determinado diagrama é necessário é verificar se todos os membros da equipe entendem determinado conceito sem os diagramas, caso afirmativo o mesmo é opcional.
  - A construção ou implementação dos códigos deve ser feita seguindo-se as normas e procedimentos padrões, com uso de ferramentas adequadas, como editores, compiladores, debugers e profillers. Em alguns casos pode-se usar uma IDE como Qt-Creator, Kdevelop, entre outros.
  - Na disciplina usamos softwares livres que os alunos podem acessar, instalar e usar sem problemas com direitos autorais e sem pirataria.
  - Caso o cliente queira usar ferramentas proprietárias deverá fornecer as mesmas (pagando as licenças associadas).
  - A construção dos códigos deve seguir as melhores práticas.
  - Na disciplina damos preferência para uso de editores modernos como [[https://www.gnu.org/software/emacs/][emacs]], [[https://code.visualstudio.com/][vscode]], com plugins e funcionalidades adequadas instaladas.
    - Nota: leia os manuais e tutoriais de uso do editor ou IDE escolhidos.
    - Nota: existem centenas de editores e IDEs, só podemos dar ajuda nos padrões utilizados na disciplina.
  - Após implementar os códigos realizar testes, como testes de unidade e testes de integração.
    - Nota: Não deixe para fazer os testes do sistemas só no final. A cada ciclo de desenvolvimento as features desenvolvidas devem ser testadas.
  - No final de cada ciclo de planejamento/detalhamento/construção a equipe deve realizar uma reunião física para discutir o andamento do projeto.
    - Conversar sobre o que foi feito, o que falta fazer e correções de rumo (ajustes).


** Etapa 5 - Entrega do produto<<Etapa 5 - Entrega do produto>><<Etapa 5>>

- A sequência é detalhada na Figura [[https://lh4.googleusercontent.com/TEoZjJz0-ldnrk0_-P0D6ZCj3bjbC5lZBtB5ofx3P9_9vV5NBrwGrWkvpQN23Sb6xpKV5MT1HrZsSntIOlSCmmD53HHY85F2GIsPmYDk_r6yit_db_lIIqWSOq3KvaAkiw=w1280][Etapa 5 - Entrega do produto]].

- A versão final do sistema de software deve passar por um sistema de testes pormenorizados.
- Testar se todas as especificações foram atendidas.
- Testar se todas os requisitos foram atendidos.
- Testar se cada uma das classes desenvolvidas atende seus requisitos e esta completamente funcional.
- Testar exemplos reais aplicados a engenharia.
  - No mundo real a quantidade de dados a serem processados numa simulação de engenharia costuma ser enorme. Normalmente os alunos não tem em casa computadores para atender esta demanda. A solução é criar um conjunto de dados reduzido e que possa ser utilizado nos testes. Mas para versão final é necessário rodar o simulador desenvolvido com dados reais. Isto permite verificar a estabilidade do sistema e tempos de procesamento.
- Testar se os manuais estão completos dando os mesmos para um terceiro ler, instalar e testar o sistema.
  - Dica: Uma equipe A pode passar seu manual do usuário para a equipe B instalar e testar o software e a equipe B pode passar seu manual para a equipe A instalar e testar.
- No caso da disciplina a equipe deve entregar a versão final com 15 dias de antecedência e marcar a data da defesa.
  - Nota: os 15 dias são necessários pois o professor precisa de tempo para ler, instalar e testar o sistema (executar os testes implementados no manual).

